import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import kruskal
import scikit_posthocs as sp
import re
import numpy as np

# Load CSV
file_path = "C:/Users/lrmacha/Downloads/H_Bonds.csv"
df = pd.read_csv(file_path)

# Drop time column
df_data = df.iloc[:, 1:]

# Convert to long format
df_long = df_data.melt(var_name='Receptor', value_name='H-Bonds')

# Superscript numbers in mutant names
def superscript_mutant(name):
    superscript_map = str.maketrans("0123456789", "⁰¹²³⁴⁵⁶⁷⁸⁹")
    return re.sub(r'(\d+)', lambda x: x.group().translate(superscript_map), name)

df_long['Receptor'] = df_long['Receptor'].apply(superscript_mutant)

# Compute mean and SD
means = df_data.mean()
stds = df_data.std()
means.index = df_data.columns.map(superscript_mutant)
stds.index = df_data.columns.map(superscript_mutant)

# Set color palette: WT white fill with black edge, mutants black fill
palette = []
edge_colors = []
for col in df_data.columns:
    if col == 'WT':
        palette.append('white')
        edge_colors.append('black')
    else:
        palette.append('black')
        edge_colors.append('black')

# Plot with subplots: left = bar, right = table
fig, ax = plt.subplots(figsize=(10,5))

# Bar plot
sns.barplot(data=df_long, x='Receptor', y='H-Bonds', palette=palette, ci='sd', edgecolor=edge_colors, ax=ax)
ax.set_ylabel('Average Number of H-Bonds')
ax.set_xlabel('Substitution')
ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')

# ---------------------------
# Statistical tests
# ---------------------------
groups = [df_data[col].dropna() for col in df_data.columns]
stat, p = kruskal(*groups)
print(f"Kruskal-Wallis H-statistic = {stat:.3f}, p = {p:.4f}")

df_posthoc = sp.posthoc_dunn(df_long, val_col='H-Bonds', group_col='Receptor', p_adjust='bonferroni')
WT_label = superscript_mutant('WT')

# Add significance stars just above error bars
def p_to_stars(pval):
    if pval < 0.001:
        return '***'
    elif pval < 0.01:
        return '**'
    elif pval < 0.05:
        return '*'
    else:
        return 'ns'

for i, receptor in enumerate(df_long['Receptor'].unique()):
    if receptor != WT_label:
        pval = df_posthoc.loc[WT_label, receptor]
        bar_height = means[receptor]
        error = stds[receptor]
        y = bar_height + error + 0.005*np.max(means)
        ax.text(i, y, p_to_stars(pval), ha='center', va='bottom', fontsize=12, color='black')

# ---------------------------
# Build summary table with p-value notation
# ---------------------------
summary_df = pd.DataFrame({
    'Receptor': means.index,
    'Mean ± SD': means.round(2).astype(str) + ' ± ' + stds.round(2).astype(str),
    'p-value vs WT': [np.nan if r==WT_label else p_to_stars(df_posthoc.loc[WT_label, r]) for r in means.index]
})

# Shrink plot to make space
box = ax.get_position()
ax.set_position([box.x0, box.y0, box.width * 0.65, box.height])

# Table on the right
ax_table = fig.add_axes([0.68, 0.1, 0.3, 0.8])
ax_table.axis('off')

# Create matplotlib table
tbl = ax_table.table(cellText=summary_df.values,
                     colLabels=summary_df.columns,
                     cellLoc='center',
                     colLoc='center',
                     loc='center')

# Style header
for (i, j), cell in tbl.get_celld().items():
    if i == 0:  # header row
        cell.set_facecolor('lightgrey')
        cell.set_text_props(weight='bold')

# Reduce font size
tbl.auto_set_font_size(False)
tbl.set_fontsize(8)
tbl.scale(1, 1.5)

# Define output paths
output_pdf = "C:/Users/lrmacha/Downloads/H_Bonds_plot.pdf"
output_svg = "C:/Users/lrmacha/Downloads/H_Bonds_plot.svg"

# Save figure as PDF (high quality)
fig.savefig(output_pdf, format='pdf', bbox_inches='tight')

# Save figure as SVG (high quality vector)
fig.savefig(output_svg, format='svg', bbox_inches='tight')

print(f"Figure saved as PDF: {output_pdf}")
print(f"Figure saved as SVG: {output_svg}")

# Then display

plt.show()
