import pandas as pd
import matplotlib.pyplot as plt
import string
import numpy as np

# ---------------------------
# Load RMSF CSVs
# ---------------------------
file_L = "C:/Users/lrmacha/Downloads/RMSF_L.csv"
file_R = "C:/Users/lrmacha/Downloads/RMSF_R.csv"

df_L = pd.read_csv(file_L)
df_R = pd.read_csv(file_R)

residues_L = df_L.iloc[:, 0]
df_data_L = df_L.iloc[:, 1:]

residues_R = df_R.iloc[:, 0]
df_data_R = df_R.iloc[:, 1:]

WT_col = 'WT'
mutants = [col for col in df_data_L.columns if col != WT_col]

# ---------------------------
# Colors and line width
# ---------------------------
color_WT = '#0072B2'      # Blue for WT
color_mutant = '#D55E00'  # Orange/red for all mutants
line_width = 1.2

# ---------------------------
# Helper function to collapse consecutive numbers into ranges
# ---------------------------
def collapse_ranges(residues):
    residues = sorted(residues)
    ranges = []
    start = end = residues[0]
    for r in residues[1:]:
        if r == end + 1:
            end = r
        else:
            ranges.append(f"{start}" if start == end else f"{start}-{end}")
            start = end = r
    ranges.append(f"{start}" if start == end else f"{start}-{end}")
    return ",".join(ranges)

# ---------------------------
# Prepare figure
# ---------------------------
n_mutants = len(mutants)
fig, axes = plt.subplots(n_mutants, 2, figsize=(14, 4*n_mutants), sharex=False, sharey=False)
if n_mutants == 1:
    axes = [axes]

# Panel labels
letters_L = list(string.ascii_uppercase[:n_mutants])  # A–F
letters_R = list(string.ascii_uppercase[6:6+n_mutants])  # G–L

# Summary dictionary
summary_diff = {}

# ---------------------------
# Plotting
# ---------------------------
for i, mutant in enumerate(mutants):
    ax_L = axes[i][0]
    ax_R = axes[i][1]
    
    # -------------------
    # RMSF_L
    # -------------------
    ax_L.plot(residues_L, df_data_L[WT_col], label='WT', linewidth=line_width, color=color_WT)
    ax_L.plot(residues_L, df_data_L[mutant], label=mutant, linewidth=line_width, color=color_mutant)
    ax_L.set_ylabel('RMSF (Å)')
    ax_L.set_title(f'{mutant} - RMSF_L')
    ax_L.grid(False)
    ax_L.text(-0.05, 1.05, letters_L[i], transform=ax_L.transAxes, fontsize=16, fontweight='bold', va='top', ha='right')
    if i == 0:
        ax_L.legend()
    
    WT_sd_L = np.std(df_data_L[WT_col])
    diff_L = abs(df_data_L[mutant] - df_data_L[WT_col])
    big_positions_L = residues_L[diff_L > 2*WT_sd_L]
    
    for pos in big_positions_L:
        ax_L.axvline(pos, color='black', linestyle='--', linewidth=1, alpha=0.5)
    
    if len(big_positions_L) > 0:
        residue_text = collapse_ranges(big_positions_L)
        ax_L.text(0.02, 0.95, residue_text, transform=ax_L.transAxes, fontsize=9, ha='left', va='top', color='black', wrap=True)
    
    summary_diff[f'{mutant}_L'] = list(big_positions_L)
    
    # -------------------
    # RMSF_R
    # -------------------
    ax_R.plot(residues_R, df_data_R[WT_col], label='WT', linewidth=line_width, color=color_WT)
    ax_R.plot(residues_R, df_data_R[mutant], label=mutant, linewidth=line_width, color=color_mutant)
    ax_R.set_ylabel('RMSF (Å)')
    ax_R.set_title(f'{mutant} - RMSF_R')
    ax_R.grid(False)
    ax_R.text(-0.05, 1.05, letters_R[i], transform=ax_R.transAxes, fontsize=16, fontweight='bold', va='top', ha='right')
    if i == 0:
        ax_R.legend()
    
    WT_sd_R = np.std(df_data_R[WT_col])
    diff_R = abs(df_data_R[mutant] - df_data_R[WT_col])
    big_positions_R = residues_R[diff_R > 2*WT_sd_R]
    
    for pos in big_positions_R:
        ax_R.axvline(pos, color='black', linestyle='--', linewidth=1, alpha=0.5)
    
    if len(big_positions_R) > 0:
        residue_text = collapse_ranges(big_positions_R)
        ax_R.text(0.02, 0.95, residue_text, transform=ax_R.transAxes, fontsize=9, ha='left', va='top', color='black', wrap=True)
    
    summary_diff[f'{mutant}_R'] = list(big_positions_R)

# X-axis for bottom plots
for ax in axes[-1]:
    ax.set_xlabel('Residue Position')

plt.tight_layout()

# ---------------------------
# Save figure
# ---------------------------
pdf_path = "C:/Users/lrmacha/Downloads/RMSF_LR_WT_vs_mutants_diff_2SD_topcorner.pdf"
svg_path = "C:/Users/lrmacha/Downloads/RMSF_LR_WT_vs_mutants_diff_2SD_topcorner.svg"
fig.savefig(pdf_path, bbox_inches='tight')
fig.savefig(svg_path, bbox_inches='tight')
plt.show()

# ---------------------------
# Save summary table of positions with big differences
# ---------------------------
summary_df = pd.DataFrame(dict([(k,pd.Series(v)) for k,v in summary_diff.items()]))
summary_csv = "C:/Users/lrmacha/Downloads/RMSF_LR_WT_vs_mutants_diff_positions_2SD_topcorner.csv"
summary_df.to_csv(summary_csv, index=False)

print(f"Figures saved as:\nPDF: {pdf_path}\nSVG: {svg_path}")
print(f"Positions with >2SD differences saved to CSV:\n{summary_csv}")
